@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container py-5 text-center">
    <!-- Interface de Entrada -->
    <h3 class="text-center mb-4" style="font-size: 2.5rem; text-shadow: 2px 4px 10px rgba(2, 2, 2, 0.7);">
        Downloads de Áudio e Vídeo
    </h3>
    <p class="text-center mb-4">Insira a URL do vídeo do YouTube:</p>
    <input @bind="url" type="text" placeholder="https://www.youtube.com/exemplo..." class="form-control mx-auto d-block" style="max-width: 700px;" />

    <div class="mt-3 text-center d-flex">
        <button @onclick="DownloadVideo" class="btn btn-dark mx-2 w-100">
            <i class="fas fa-video me-2"></i> Baixar Vídeo
        </button>
        <button @onclick="DownloadAudio" class="btn btn-danger mx-2 w-100">
            <i class="fas fa-music me-2"></i> Baixar Áudio
        </button>
    </div>

    @if (isLoading)

    {
        <div class="spinner-border text-primary mt-3" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    }

    <!-- Mensagens de Sucesso e Erro -->
    @if (!string.IsNullOrEmpty(successMessage))

    {
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true" style="position: absolute; top: 20px; right: 20px; z-index: 1050;">
            <div class="d-flex">
                <div class="toast-body">@successMessage</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast"></button>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))

    {
        <div class="toast align-items-center text-white bg-danger border-0 show" role="alert" aria-live="assertive" aria-atomic="true" style="position: absolute; top: 20px; right: 20px; z-index: 1050;">
            <div class="d-flex">
                <div class="toast-body">@errorMessage</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast"></button>
            </div>
        </div>
    }

    <p class="mt-3 text">Uma aplicação intuitiva e prática para downloads de áudio e vídeo...</p>
</div>

@code {
    private string? url;

    private string? fileUrl;

    private string? fileName;

    private bool isLoading;

    private string? successMessage;

    private string? errorMessage;



    private async Task DownloadVideo() => await DownloadMedia("video");

    private async Task DownloadAudio() => await DownloadMedia("audio");



    private async Task DownloadMedia(string mediaType)

    {

        if (string.IsNullOrWhiteSpace(url))

        {

            errorMessage = "A URL não pode estar vazia.";

            return;

        }



        isLoading = true;

        try

        {

            var response = await Http.GetAsync($"api/download/{mediaType}?url={url}");

            if (response.IsSuccessStatusCode)

            {

                fileUrl = response.RequestMessage?.RequestUri?.ToString();

                fileName = response.Content.Headers.ContentDisposition?.FileName ?? "downloaded_file";



                // Inicia o download do arquivo

                await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);

                successMessage = "Download concluído com sucesso!";

            }

            else

            {

                errorMessage = response.StatusCode == System.Net.HttpStatusCode.BadRequest

                    ? "Forneça uma URL válida."

                    : "Ocorreu um erro ao tentar baixar o arquivo. Tente novamente mais tarde.";

            }

        }

        catch (Exception)

        {

            errorMessage = "Erro ao se conectar ao servidor. Verifique sua conexão.";

        }

        finally

        {

            isLoading = false;

        }

    }



    private void HideToast()

    {

        successMessage = string.Empty;

        errorMessage = string.Empty;

    }
}
